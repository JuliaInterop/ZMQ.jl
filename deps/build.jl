using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libzmq"], :libzmq),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaInterop/ZMQBuilder/releases/download/v4.2.5+2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc, :blank_abi) => ("$bin_prefix/ZMQ.aarch64-linux-gnu.tar.gz", "8ef45ccc172fa85ed97d0d8afaa565369b1fcf0131e85865a543823bba69e44e"),
    BinaryProvider.Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/ZMQ.arm-linux-gnueabihf.tar.gz", "6952ca3d9ca0aa85759f6fb030c3c8d2d463872539faa3ccb09deb5ee82932b2"),
    BinaryProvider.Linux(:i686, :glibc, :blank_abi) => ("$bin_prefix/ZMQ.i686-linux-gnu.tar.gz", "26084a9999ec954c7fe16ac814f58329687f3b45a948cd074651e8a2c1d0d2c8"),
    BinaryProvider.Windows(:i686, :blank_libc, :blank_abi) => ("$bin_prefix/ZMQ.i686-w64-mingw32.tar.gz", "364bd7ca503b40edf3161f2a52361f9e88f76e8c23a0383d239f986f080ff575"),
    BinaryProvider.Linux(:powerpc64le, :glibc, :blank_abi) => ("$bin_prefix/ZMQ.powerpc64le-linux-gnu.tar.gz", "e304acd668a7b758e30c2da844e1ccc99cd0ef1d11dc7b7f4557a6f2485f9a40"),
    BinaryProvider.MacOS(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/ZMQ.x86_64-apple-darwin14.tar.gz", "e8ddb68cc6e086972c12942a13c0132f1e6d7ea3bca354bfaf34f93a2d69479f"),
    BinaryProvider.Linux(:x86_64, :glibc, :blank_abi) => ("$bin_prefix/ZMQ.x86_64-linux-gnu.tar.gz", "41536ce230958072c59713e75a691b550873c3539cc23b76297586ca7abbffe9"),
    BinaryProvider.Windows(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/ZMQ.x86_64-w64-mingw32.tar.gz", "eda8cb90498436248a39e983d7b86f3201aa4f7de55af9de1f523e7f63fedb21"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    else
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something more even more ambitious here.
        error("Your platform $(triplet(platform_key())) is not supported by this package!")
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
